"""align schema: rename tables and add missing columns

Revision ID: 9438b689e581
Revises: f5333c1259ce
Create Date: 2025-09-29 01:13:45.213556

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '9438b689e581'
down_revision = 'f5333c1259ce'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('health_content',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('content_type', sa.String(length=20), nullable=False),
    sa.Column('condition', sa.String(length=50), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=False),
    sa.Column('language', sa.String(length=20), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('author', sa.String(length=100), nullable=True),
    sa.Column('source', sa.String(length=200), nullable=True),
    sa.Column('tags', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('health_workers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('phone', sa.String(length=15), nullable=False),
    sa.Column('worker_type', sa.String(length=20), nullable=False),
    sa.Column('certification_id', sa.String(length=50), nullable=False),
    sa.Column('specializations', sa.Text(), nullable=True),
    sa.Column('state', sa.String(length=50), nullable=False),
    sa.Column('district', sa.String(length=50), nullable=False),
    sa.Column('coverage_areas', sa.Text(), nullable=True),
    sa.Column('languages', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('certification_id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('phone')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('phone', sa.String(length=15), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('age', sa.Integer(), nullable=False),
    sa.Column('gender', sa.String(length=10), nullable=False),
    sa.Column('state', sa.String(length=50), nullable=False),
    sa.Column('district', sa.String(length=50), nullable=False),
    sa.Column('village_city', sa.String(length=100), nullable=False),
    sa.Column('conditions', sa.Text(), nullable=True),
    sa.Column('preferred_language', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('phone')
    )
    op.create_table('patient_worker_connections',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('health_worker_id', sa.Integer(), nullable=False),
    sa.Column('connection_type', sa.String(length=20), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('connected_at', sa.DateTime(), nullable=True),
    sa.Column('last_contact', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['health_worker_id'], ['health_workers.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reminders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('reminder_type', sa.String(length=20), nullable=False),
    sa.Column('medication_name', sa.String(length=100), nullable=True),
    sa.Column('dosage', sa.String(length=50), nullable=True),
    sa.Column('scheduled_time', sa.Time(), nullable=False),
    sa.Column('frequency', sa.String(length=20), nullable=False),
    sa.Column('days_of_week', sa.String(length=20), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('notification_enabled', sa.Boolean(), nullable=True),
    sa.Column('language', sa.String(length=20), nullable=True),
    sa.Column('last_triggered', sa.DateTime(), nullable=True),
    sa.Column('next_trigger', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('vital_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('blood_sugar', sa.Float(), nullable=True),
    sa.Column('blood_pressure_systolic', sa.Integer(), nullable=True),
    sa.Column('blood_pressure_diastolic', sa.Integer(), nullable=True),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('heart_rate', sa.Integer(), nullable=True),
    sa.Column('measurement_time', sa.String(length=20), nullable=True),
    sa.Column('before_after_meal', sa.String(length=10), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('recorded_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('vitals')
    op.drop_table('user')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=15), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('age', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('gender', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    sa.UniqueConstraint('email', name='user_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('phone', name='user_phone_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('vitals',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('heart_rate', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('blood_pressure', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('temperature', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('oxygen_level', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('recorded_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('vitals_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('vitals_pkey'))
    )
    op.drop_table('vital_records')
    op.drop_table('reminders')
    op.drop_table('patient_worker_connections')
    op.drop_table('users')
    op.drop_table('health_workers')
    op.drop_table('health_content')
    # ### end Alembic commands ###
